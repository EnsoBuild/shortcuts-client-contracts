// EnsoReceiver::ExecuteMultiSend - TODO
// ├── when reentrant
// │   └── it should revert
// └── when non reentrant
//     └── it should execute multiSend

// EnsoReceiver::ExecuteShortcut_SenderIsEnsoReceiver
// ├── when reentrant
// │   └── it should revert
// └── when non reentrant
//     ├── when caller is not EnsoReceiver nor owner
//     │   └── it should revert
//     └── when caller is EnsoReceiver
//         ├── when shortcut execution failed
//         │   └── it should revert
//         └── when shortcut execution succeeded
//             ├── it should emit ShortcutExecuted
//             └── it should apply shortcut state changes

// EnsoReceiver::ExecuteShortcut_SenderIsOwner
// ├── when reentrant
// │   └── it should revert
// └── when non reentrant
//     ├── when caller is not EnsoReceiver nor owner
//     │   └── it should revert
//     └── when caller is owner
//         ├── when shortcut execution failed
//         │   └── it should revert
//         └── when shortcut execution succeeded
//             ├── it should emit ShortcutExecuted
//             └── it should apply shortcut state changes

// EnsoReceiver::Initialize
// ├── when already initialized
// │   └── it should revert
// └── when not initialized
//     ├── it should set owner
//     ├── it should set signer
//     └── it should set entryPoint

// EnsoReceiver::Owner
// └── it should return owner

// EnsoReceiver::SafeExecute_SenderIsEntryPoint
// ├── when caller is not EntryPoint nor owner
// │   └── it should revert
// └── when caller is EntryPoint
//     ├── when shortcut execution succeeded
//     │   ├── it should emit ShortcutExecutionSuccessful
//     │   └── it apply shortcut state changes
//     └── when shortcut execution failed
//         ├── when tokenIn is native token
//         │   ├── when withdraw call is unsuccessful
//         │   │   └── it should revert
//         │   └── when withdraw call is successful
//         │       ├── it should emit ShortcutExecutionFailed
//         │       └── it should send native token amount to owner
//         └── when tokenIn is not native token
//             ├── when withdraw safe transfer is unsuccessful
//             │   └── it should revert
//             └── when withdraw safe transfer is successful
//                 ├── it should emit ShortcutExecutionFailed
//                 └── it should transfer token amount to owner

// EnsoReceiver::SafeExecute_SenderIsOwner
// ├── when caller is not EntryPoint nor owner
// │   └── it should revert
// └── when caller is owner
//     ├── when shortcut execution succeeded
//     │   ├── it should emit ShortcutExecutionSuccessful
//     │   └── it apply shortcut state changes
//     └── when shortcut execution failed
//         ├── when tokenIn is native token
//         │   ├── when withdraw call is unsuccessful
//         │   │   └── it should revert
//         │   └── when withdraw call is successful
//         │       ├── it should emit ShortcutExecutionFailed
//         │       └── it should send native token amount to owner
//         └── when tokenIn is not native token
//             ├── when withdraw safe transfer is unsuccessful
//             │   └── it should revert
//             └── when withdraw safe transfer is successful
//                 ├── it should emit ShortcutExecutionFailed
//                 └── it should transfer token amount to owner

// EnsoReceiver::SetEntryPoint
// ├── when caller is not owner
// │   └── it should revert
// └── when caller is owner
//     ├── it should set entryPoint
//     └── it should set newEntryPoint

// EnsoReceiver::SetSigner
// ├── when caller is not owner
// │   └── it should revert
// └── when caller is owner
//     ├── it should set signer
//     └── it should emit newSigner

// EnsoReceiver::ValidateUserOp
// ├── when caller is not entryPoint
// │   └── it should revert
// └── when caller is entryPoint
//     ├── when signer is EOA
//     │   ├── when nonce is not valid1
//     │   │   └── it should revert
//     │   └── when nonce is valid1
//     │       └── it should return sigValidationSuccess
//     ├── when signer is EOA7702
//     │   ├── when nonce is not valid2
//     │   │   └── it should revert
//     │   └── when nonce is valid2
//     │       └── it should return sigValidationSuccess
//     ├── when signer is not ERC1271
//     │   └── it should return sigValidationFailed
//     └── when signer is ERC1271
//         ├── when nonce is not valid3
//         │   └── it should revert
//         └── when nonce is valid3
//             └── it should return sigValidationSuccess

// SignaturePaymaster::Version
// └── it should return version

// EnsoReceiver::WithdrawERC20s - TODO
// ├── when caller is not owner
// │   └── it should revert
// └── when caller is owner
//     ├── when transfer is not successful
//     │   └── it should revert
//     └── when transfer is successful
//         └── it should transfer amount to owner

// EnsoReceiver::WithdrawERC721s - TODO
// ├── when caller is not owner
// │   └── it should revert
// └── when caller is owner
//     ├── when transfer is not successful
//     │   └── it should revert
//     └── when transfer is successful
//         └── it should transfer token to owner

// NOTE: weak test, explore reentrancy
// EnsoReceiver::WithdrawERC1155s - TODO
// ├── when caller is not owner
// │   └── it should revert
// └── when caller is owner
//     ├── when transfer is not successful
//     │   └── it should revert
//     └── when transfer is successful
//         └── it should transfer token to owner

// EnsoReceiver::WithdrawNative
// ├── when caller is not owner
// │   └── it should revert
// └── when caller is owner
//     ├── when call is not successful
//     │   └── it should revert
//     └── when call is successful
//         └── it should send native token amount to owner
